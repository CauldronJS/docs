(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{103:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return h}));var a=n(1),r=n(6),i=(n(0),n(120)),o={id:"api-overview",title:"API Overview",sidebar_label:"Overview"},s={id:"api-overview",title:"API Overview",description:"Cauldron is a very complex project, but I want to make that less of the case with some\r",source:"@site/docs\\api-overview.md",permalink:"/docs/api-overview",editUrl:"https://github.com/CauldronJS/scripts/edit/master/docusaurus/docs/api-overview.md",sidebar_label:"Overview",sidebar:"someSidebar",previous:{title:"Using JSX In Cauldron",permalink:"/docs/jsx"}},l=[{value:"In The Beginning",id:"in-the-beginning",children:[]},{value:"2 Parts Java, 1 Part JavaScript",id:"2-parts-java-1-part-javascript",children:[{value:"What Is The CVM?",id:"what-is-the-cvm",children:[]},{value:"Differences Between Platforms",id:"differences-between-platforms",children:[]}]},{value:"Native Libraries",id:"native-libraries",children:[]}],c={rightToc:l};function h(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Cauldron is a very complex project, but I want to make that less of the case with some\ndetailed explanations of how it all works. If you aren't interested, that's fine. If you are,\nwell then take a seat for a bit."),Object(i.b)("h2",{id:"in-the-beginning"},"In The Beginning"),Object(i.b)("p",null,"Cauldron stemmed from an old project I helped with called\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Connicpu/PlugJS"}),"PlugJS")," (",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Conji/PlugJS-Lib"}),"associated scripts"),"). I'm still somewhat proud of it because it started 6 months prior to the popular\nScriptCraft","\u2122",", back when Bukkit was still kind of new and the game was taking off. As\nsomeone who wasn't too fond of Java but had a positive mindset about JavaScript and the new\nlanguages being built from it, having fun with it wasn't hard. Since Oracle","\xae"," provided a\ngood JavaScript engine (Rhino at the time) with Java, there really wasn't anything to shy away\nfrom."),Object(i.b)("p",null,"Move forward a little bit and the plugin was mostly written in CoffeeScript (is it still alive?\n). Life occured, jobs happened, and fast forward to around 2017. I'd found the new JS engine\nNashorn and was ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/Thiq/Thiq"}),"determined to make a plugin better than prior"),".\nIt was hard considering it didn't have the new features JS was beginning to release with, but\nI dealt with it. Through another year or two, the gap widened by too much. Dropping active\ndevelopment until I could either find a new engine or get the guts to write my own, the\nwaiting game began."),Object(i.b)("p",null,"Eventually I stumbled about GraalVM","\xae"," and thus CauldronJS was born. New life had been given\nto what was originally named Thiq with so much more potential but a larger goal: allow NodeJS\nto run in an already existing Java environment. Graal can run JS and replace Node, but it\ncan't do it in the Java context. When asked to, the developers simply said \"we can't\". This\nwhat birthed the need for Cauldron."),Object(i.b)("h2",{id:"2-parts-java-1-part-javascript"},"2 Parts Java, 1 Part JavaScript"),Object(i.b)("p",null,"One of the main design principles for Cauldron is ",Object(i.b)("em",{parentName:"p"},"never require the developer to rely on\nJava"),". No matter the problem, something shouldn't be implemented in a different way just\nbecause it's the core is in Java. If someone wants to, they have the power to. But if you run\ninto a problem, it shouldn't be required to compare a Java vs JavaScript. This is achieved by\nhaving the core functionality of the plugin residing in\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/cauldronjs/api"}),"the API repository"),". All thread work is consistent across\nall platforms to provide a common benchmark. In the future, instances of the CVM/Isolate will\nbe placed on a separate thread when possible, but that's way farther than now and won't change\nany base implementations."),Object(i.b)("h3",{id:"what-is-the-cvm"},"What Is The CVM?"),Object(i.b)("p",null,"The CVM, or the Cauldron Virtual Machine, is referenced as an ",Object(i.b)("inlineCode",{parentName:"p"},"Isolate")," in the code. This class\nis in charge of creating the JS engine and managing the context as well as bindings. If you\ncreate 2 Isolates, neither will have knowledge of each other. By keeping them separate, it can\nprevent security concerns when running multiple JS environments within a single JVM. An example\nof where this can be used would be to create a computer mod that runs on JS."),Object(i.b)("p",null,"By default, the Cauldron instance has a main Isolate. When creating the Isolate, the core\nlibraries are bootstrapped to inject Cauldron specific globals and process information. If\nwe have an Isolate prepared and ready to be used, we can save the hassle of building a new one\nat runtime. While not expensive, it can save precious seconds. Once set in a warming state, the\nIsolate can then either run the entry point of the working directory or process regular JS\ninputs. The platform specific JARs then use this to process the code in whatever way it sees\nfit."),Object(i.b)("h3",{id:"differences-between-platforms"},"Differences Between Platforms"),Object(i.b)("p",null,"At the moment Cauldron runs on Spigot and Sponge, of which both are very different. Spigot\nreimplements the Bukkit API while Sponge creates its own. To bypass this, the Cauldron API\nis built into each artifact at compile time so as not to duplicate code and create as\nconsistent a codebase as possible. The design between the two though is not very different.\nBoth listen for when Cauldron is being allowed to load then process the entry point there. Even\nif a client-side version of Cauldron were made, it'd function the same way."),Object(i.b)("h2",{id:"native-libraries"},"Native Libraries"),Object(i.b)("p",null,"Embedded within Cauldron is the core library implementation. In NodeJS, this is found in the\n",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/nodejs/node/tree/master/lib"}),Object(i.b)("inlineCode",{parentName:"a"},"lib")," directory")," - the same as Cauldron. The\ndifference is that Cauldron allows for hot reloading and contextual injecting of this directory\nfrom local disk, meaning updates can be pushed to Cauldron without having to reinstall the\nplugin. To prevent files from hijacking the directory, Cauldron keeps a lock on the directory\nso external threads or non-owned JS can't modify it. The only recommended way to update is via the command ",Object(i.b)("inlineCode",{parentName:"p"},"npx update-cauldron")," (",Object(i.b)("em",{parentName:"p"},"soon to be implemented"),")."))}h.isMDXComponent=!0},120:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return b}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),h=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s({},t,{},e)),n},d=function(e){var t=h(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=h(n),u=a,b=d["".concat(o,".").concat(u)]||d[u]||p[u]||i;return n?r.a.createElement(b,s({ref:t},c,{components:n})):r.a.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);